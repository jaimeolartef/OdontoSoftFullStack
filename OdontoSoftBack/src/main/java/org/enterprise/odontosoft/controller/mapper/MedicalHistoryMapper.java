package org.enterprise.odontosoft.controller.mapper;

import lombok.experimental.UtilityClass;
import org.enterprise.odontosoft.model.Entity.*;
import org.enterprise.odontosoft.view.dto.request.HistoriaClinicaRequest;
import org.enterprise.odontosoft.view.dto.response.HistoriaClinicaResponse;

import java.util.Objects;
import java.util.stream.Collectors;

@UtilityClass
public class MedicalHistoryMapper {

    public static HistoriaClinica toEntity(HistoriaClinicaRequest historiaClinicaRequest) {
        return HistoriaClinica.builder()
            .id(historiaClinicaRequest.getId())
            .idpaciente(Paciente.builder()
                .id(historiaClinicaRequest.getIdpaciente())
                .build())
            .motivoconsulta(historiaClinicaRequest.getMotivoconsulta())
            .enfermedadactual(historiaClinicaRequest.getEnfermedadactual())
            .ultimomedicotratante(historiaClinicaRequest.getUltimomedicotratante())
            .observacionantec(historiaClinicaRequest.getObservacionantec())
            .observacionantecodon(historiaClinicaRequest.getObservacionantecodon())
            .observacion(historiaClinicaRequest.getObservacion())
            .observacionanafunc(historiaClinicaRequest.getObservacionanafunc())
            .observacionexaestomat(historiaClinicaRequest.getObservacionexaestomat())
            .observacionodontograma(historiaClinicaRequest.getObservacionodontograma())
            .observacionexaperiodontal(historiaClinicaRequest.getObservacionexaperiodontal())
            .observacionanalisisoclu(historiaClinicaRequest.getObservacionanalisisoclu())
            .observacionayudadiag(historiaClinicaRequest.getObservacionayudadiag())
            .idusuariocreacion(Usuario.builder()
                .id(historiaClinicaRequest.getIdusuariocreacion())
                .build())
            .atmmusculatura(historiaClinicaRequest.getAtmmusculatura())
            .fechacreacion(historiaClinicaRequest.getFechacreacion())
            .idusuariomodificacion(Usuario.builder()
                .id(historiaClinicaRequest.getIdusuariomodificacion())
                .build())
            .fechamodificacion(historiaClinicaRequest.getFechamodificacion())
            .habilitado(historiaClinicaRequest.getHabilitado())
            .acoplamientodienteants(historiaClinicaRequest.getAcoplamientodienteants().stream()
                .map(AcoplamientoDienteAntMapper::toEntity)
                .collect(Collectors.toSet()))
            .analisisoclusions(historiaClinicaRequest.getAnalisisoclusions().stream()
                .map(AnalisisOclusionMapper::toEntity)
                .collect(Collectors.toSet()))
            .antecedentepacientes(historiaClinicaRequest.getAntecedentepacientes().stream()
                .map(AntecedentePacienteMapper::toEntity)
                .collect(Collectors.toSet()))
            .ayudadiagnosticas(historiaClinicaRequest.getAyudadiagnosticas().stream()
                .map(AyudaDiagnosticaMapper::toEntity)
                .collect(Collectors.toSet()))
            .contactooclusalesmovs(historiaClinicaRequest.getContactooclusalesmovs().stream()
                .map(ContactoOclusalesMovMapper::toEntity)
                .collect(Collectors.toSet()))
            .diagnosticos(historiaClinicaRequest.getDiagnosticos().stream()
                .map(DiagnosticoMapper::toEntity)
                .collect(Collectors.toSet()))
            .examendentals(historiaClinicaRequest.getExamendentals().stream()
                .map(ExamenDentalMapper::toEntity)
                .collect(Collectors.toSet()))
            .examenestomatologicos(historiaClinicaRequest.getExamenestomatologicos().stream()
                .map(ExamenEstomatologicoMapper::toEntity)
                .collect(Collectors.toSet()))
            .examenperiodontals(historiaClinicaRequest.getExamenperiodontals().stream()
                .map(ExamenPeriodontalMapper::toEntity)
                .collect(Collectors.toSet()))
            .habitopacientes(historiaClinicaRequest.getHabitopacientes().stream()
                .map(HabitoPacienteMapper::toEntity)
                .collect(Collectors.toSet()))
            .historiacaries(historiaClinicaRequest.getHistoriacaries().stream()
                .map(HistoriAcariesMapper::toEntity)
                .collect(Collectors.toSet()))
            .odontogramas(historiaClinicaRequest.getOdontogramas().stream()
                .map(OdontogramaMapper::toEntity)
                .collect(Collectors.toSet()))
            .plantratamientos(historiaClinicaRequest.getPlantratamientos().stream()
                .map(PlanTratamientoMapper::toEntity)
                .collect(Collectors.toSet()))
            .signovitals(historiaClinicaRequest.getSignovitals().stream()
                .map(SignoVitalMapper::toEntity)
                .collect(Collectors.toSet()))
            .build();
    }

    public static HistoriaClinicaResponse toDto(HistoriaClinica historiaClinica) {
        return HistoriaClinicaResponse.builder()
            .id(historiaClinica.getId())
            .idpaciente(Objects.nonNull(historiaClinica.getIdpaciente()) ? historiaClinica.getIdpaciente().getId() : null)
            .motivoconsulta(historiaClinica.getMotivoconsulta())
            .enfermedadactual(historiaClinica.getEnfermedadactual())
            .ultimomedicotratante(historiaClinica.getUltimomedicotratante())
            .observacionantec(historiaClinica.getObservacionantec())
            .observacionantecodon(historiaClinica.getObservacionantecodon())
            .observacion(historiaClinica.getObservacion())
            .observacionanafunc(historiaClinica.getObservacionanafunc())
            .observacionexaestomat(historiaClinica.getObservacionexaestomat())
            .observacionodontograma(historiaClinica.getObservacionodontograma())
            .observacionexaperiodontal(historiaClinica.getObservacionexaperiodontal())
            .observacionanalisisoclu(historiaClinica.getObservacionanalisisoclu())
            .observacionayudadiag(historiaClinica.getObservacionayudadiag())
            .idusuariocreacion(historiaClinica.getIdusuariocreacion().getId())
            .atmmusculatura(historiaClinica.getAtmmusculatura())
            .fechacreacion(historiaClinica.getFechacreacion())
            .idusuariomodificacion(Objects.nonNull(historiaClinica.getIdusuariomodificacion()) ? historiaClinica.getIdusuariomodificacion().getId() : null)
            .fechamodificacion(historiaClinica.getFechamodificacion())
            .habilitado(historiaClinica.getHabilitado())
            .acoplamientodienteants(historiaClinica.getAcoplamientodienteants().stream().map(AcoplamientoDienteAntMapper::toResponse).toList())
            .analisisoclusions(historiaClinica.getAnalisisoclusions().stream().map(AnalisisOclusionMapper::toResponse).toList())
            .antecedentepacientes(historiaClinica.getAntecedentepacientes().stream().map(AntecedentePacienteMapper::toResponse).toList())
            .ayudadiagnosticas(historiaClinica.getAyudadiagnosticas().stream().map(AyudaDiagnosticaMapper::toResponse).toList())
            .contactooclusalesmovs(historiaClinica.getContactooclusalesmovs().stream().map(ContactoOclusalesMovMapper::toResponse).toList())
            .diagnosticos(historiaClinica.getDiagnosticos().stream().map(DiagnosticoMapper::toResponse).toList())
            .examendentals(historiaClinica.getExamendentals().stream().map(ExamenDentalMapper::toResponse).toList())
            .examenestomatologicos(historiaClinica.getExamenestomatologicos().stream().map(ExamenEstomatologicoMapper::toResponse).toList())
            .examenperiodontals(historiaClinica.getExamenperiodontals().stream().map(ExamenPeriodontalMapper::toResponse).toList())
            .habitopacientes(historiaClinica.getHabitopacientes().stream().map(HabitoPacienteMapper::toResponse).toList())
            .historiacaries(historiaClinica.getHistoriacaries().stream().map(HistoriAcariesMapper::toResponse).toList())
            .odontogramas(historiaClinica.getOdontogramas().stream().map(OdontogramaMapper::toResponse).toList())
            .plantratamientos(historiaClinica.getPlantratamientos().stream().map(PlanTratamientoMapper::toResponse).toList())
            .signovitals(historiaClinica.getSignovitals().stream().map(SignoVitalMapper::toResponse).toList())
            .build();
    }
}